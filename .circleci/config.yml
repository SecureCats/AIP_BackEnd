# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.7.4-buster-node

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/AIP_BackEnd

    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init

      # Download and cache dependencies
      - restore_cache:
          name: restore python cache
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - restore_cache:
          name: restore yarn cache
          keys:
            - yarn-package-{{ checksum "frontend/yarn.lock" }}

      - run:
          name: install dependencies
          command: |
            sudo apt-get install libgmp3-dev libmpfr-dev libmpc-dev
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - run:
          name: build frontend
          command: |
            yarn global add @vue/cli
            cd frontend && yarn build --frozen-lockfile

      - save_cache:
          name: save python cache
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      - save_cache:
          path:
            - ~/.cache/yarn
          key: yarn-package-{{ checksum "frontend/yarn.lock" }}
          name: save yarn cache

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            python manage.py test

      - store_artifacts:
          path: test-reports
          destination: test-reports